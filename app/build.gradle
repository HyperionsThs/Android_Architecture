apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: '../autodimension.gradle'

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.example.framgia.android_architecture"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    signingConfigs {
        def signFile = file("../local.properties")
        def signingProps = new Properties()
        debug {
            storeFile file("../keystores/android.jks")
            storePassword "Android123456"
            keyAlias "android"
            keyPassword "androidpw"
        }
        release {
            signingProps.load(new FileInputStream(signFile))
            storeFile file("../keystores/android.jks")
            storePassword signingProps['storePassword']
            keyAlias signingProps['keyAlias']
            keyPassword signingProps['keyPassword']
        }
    }
    buildTypes {
        debug {
            signingConfigs.debug
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        mock {
            versionNameSuffix = "mock"
            applicationIdSuffix = ".mock"
            manifestPlaceholders = [applicationName: "MOCK"]
            signingConfig signingConfigs.debug
        }
        dev {
            versionNameSuffix = "dev"
            applicationIdSuffix = ".dev"
            manifestPlaceholders = [applicationName: "DEV"]
            signingConfig signingConfigs.debug
        }
        prd {
            manifestPlaceholders = [applicationName: "@string/app_name"]
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions "default"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Support libraries
    implementation deps.support.app_compat
    implementation deps.support.v4
    implementation deps.support.design
    implementation deps.constraint_layout

    // Architecture components
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    kapt deps.lifecycle.compiler
    implementation deps.room.runtime

    // RxJava
    implementation deps.rx_android
    implementation deps.rxjava2

    // Retrofit
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.retrofit.adapter_rxjava2
    implementation deps.retrofit.mock

    // OkHttp
    implementation deps.okhttp_logging

    // Kotlin
    implementation deps.kotlin.stdlib

    // Dependencies for local unit tests
    testImplementation deps.junit
    testImplementation deps.mockito.all
    testImplementation deps.hamcrest
    testImplementation deps.kotlin.test
    testImplementation deps.kotlin.stdlib

    // Dependencies for Android unit tests
    androidTestCompile deps.junit
    androidTestCompile deps.mockito.core, { exclude group: 'net.bytebuddy' }
    androidTestCompile deps.dexmaker

    // Espresso UI Testing
    androidTestCompile deps.espresso.core
    androidTestCompile deps.espresso.contrib
    androidTestCompile deps.espresso.intents

    // Resolve conflicts between main and test APK
    androidTestCompile deps.support.annotations
    androidTestCompile deps.support.v4
    androidTestCompile deps.support.app_compat
    androidTestCompile deps.support.design

    // Support libraries
    implementation deps.support.app_compat
    implementation deps.support.v4
    implementation deps.support.design
    implementation deps.support.gridlayout
    implementation deps.constraint_layout

    // Firebase
    implementation deps.firebase.core
    implementation deps.firebase.messaging
}

//TODO add when use google services
//apply plugin: 'com.google.gms.google-services'
